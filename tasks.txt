---immediate-------------------------------------------------------------------
- add bbox(mesh) to misc_utils.h
- add centroid(mesh) to misc_utils.h
- pass functor to SimplexSearch class, instead of just a pointer
- move spherical_head_model.cc to bin/ directory, and add better cli support
- make bin/create_dipoles.cc
- make bin/create_material_layers.cc
- finish bin/test_localization.cc
- prepare simulation pipeline for head model (see examples/head/ directory)

---high------------------------------------------------------------------------
- create VTK_File class for saving PointData and CellData fields
- given a set of points, define a function whose value at a point x, is the value of the nearest point to x ... use this to visualize the cost function (countour plot in 3d)
    * input: set of points x_1, x_2, ..., x_n
    * output: vtk file
- zmq-based remote logger (forward messages from logger)
- figure out how to redirect a program's stdout/stderr streams
- verify that files are opened properly (proper error handling)
- create libsloc.a library and have binaries link against that
- move src and header files to use sloc prefix (e.g. #include <sloc/geometry_utils.h>)
- importing obj / ply files

---normal----------------------------------------------------------------------
- Validate the BEM equation (examine the solver residuals)
- Write up derivation of charge dipole equation
- Configurable logging levels (controlled from input parameter file)
- Fix the point cloud class to use kd-trees with the FLANN library
- Better timer class (global database of timings)
- Visualize timer information using d3.js (square area plots)
- Visualize mesh using VTK (configure position of camera & light sources)
- Set up VTK visualization pipeline using a json config file?
- Set up FLANN so we can do nearest-neighbor point queries
- allow comments in text input files (material, dipole, ...)
- run nested cubes example (with fewer cells than the level1 sphere)
- handle electrodes at arbitrary points on surface (not necessarily at a node)
- do a scattershot search of initial search positions, before switching to the simplex search method

---low-------------------------------------------------------------------------
- Library for mesh coarsening?
- Provide installation instructions for all dependencies
- BEM/FEM solvers with libMesh? (so we can use tetrahedra)
- nonlinear optimization techniques to look into
    * downhill simplex method
    * gradient
    * simulated annealing

---done------------------------------------------------------------------------
- work on hptimer code
- read initial search position from the inverse problem parameter file
- implement octree (borrowed a GPL one, and figured out how to use it on 3d points)
- Write down derivation of formulas used in bem_solve.cc
- Fill in the lead matrix values using the forward solution
- Lay down framework for solving the inverse problem
- Run spherical shell problem from .ucd files
- read other simplex search params (max_iterations, verbose, debug, ...) from the inv_prob parameter file
- read simplex search params (alpha, beta, gamma, sigma) from the inv_prob parameter file
- make a parameters file for bem_inverse_solver
- Reading dealii parameter files
- Run bem_solve with small UCD meshes
- Fix code for handling multiple layers
- merge Bone2.quad.ucd and Artery2_1.quad.ucd into single file head.ucd
- split boundaries of Bone2.quad.ucd into material ids 0 and 1
- add material data array to sloc::Mesh
- Split out classes in bem_solve.cc
- Figure out how to change material ids in .ucd files
- Make bem_solve read data from UCD meshes (instead of the exodus meshes)
- Verify the UCD writer (open files in paraview or some other program)
- Make source file dependencies explicit in the makefile (instead of using *.{cc,h} glob patterns)
- Convert triangular mesh to quadrilateral mesh
- Convert STL files to UCD
- UCD writer written
- Mesh class written
- STL reader written
